
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Aug 28 15:53:12 CST 2020
//----------------------------------------------------

package ProjectTC.Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Aug 28 15:53:12 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\003\013\000\002\003" +
    "\010\000\002\003\012\000\002\003\007\000\002\002\014" +
    "\000\002\002\014\000\002\002\010\000\002\004\004\000" +
    "\002\004\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\004\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\005\010\000\002\005\010\000" +
    "\002\005\010\000\002\005\010\000\002\005\006\000\002" +
    "\005\006\000\002\005\006\000\002\005\015\000\002\005" +
    "\012\000\002\005\013\000\002\005\015\000\002\005\012" +
    "\000\002\005\006\000\002\005\005\000\002\005\007\000" +
    "\002\005\007\000\002\005\006\000\002\005\006\000\002" +
    "\005\005\000\002\005\007\000\002\005\007\000\002\005" +
    "\013\000\002\005\007\000\002\005\006\000\002\005\006" +
    "\000\002\005\010\000\002\005\010\000\002\005\011\000" +
    "\002\005\011\000\002\007\011\000\002\014\007\000\002" +
    "\014\003\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\006\000\002\014\007\000\002\010\015" +
    "\000\002\011\011\000\002\012\013\000\002\013\011\000" +
    "\002\015\012\000\002\015\011\000\002\006\002\000\002" +
    "\006\005\000\002\006\004\000\002\006\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\010\052\004\061\007\062\005\001\002\000" +
    "\006\061\346\062\345\001\002\000\004\042\341\001\002" +
    "\000\004\002\340\001\002\000\004\042\010\001\002\000" +
    "\004\041\011\001\002\000\004\062\012\001\002\000\004" +
    "\042\013\001\002\000\004\034\014\001\002\000\006\040" +
    "\016\064\015\001\002\000\004\005\317\001\002\000\004" +
    "\032\021\001\002\000\004\035\020\001\002\000\004\002" +
    "\ufffe\001\002\000\004\033\022\001\002\000\004\034\023" +
    "\001\002\000\022\007\032\010\036\011\031\012\026\014" +
    "\034\015\025\016\040\042\041\001\002\000\024\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\035" +
    "\ufff2\042\ufff2\001\002\000\004\032\311\001\002\000\004" +
    "\032\277\001\002\000\024\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\014\uffee\015\uffee\016\uffee\035\uffee\042\uffee\001\002" +
    "\000\024\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\035\ufff8\042\ufff8\001\002\000\004\042\260" +
    "\001\002\000\006\030\233\042\234\001\002\000\024\007" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\035\ufff4\042\ufff4\001\002\000\004\034\223\001\002\000" +
    "\024\007\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\035\ufff6\042\ufff6\001\002\000\006\030\206\042" +
    "\207\001\002\000\024\007\032\010\036\011\031\012\026" +
    "\014\034\015\025\016\040\035\205\042\041\001\002\000" +
    "\004\032\126\001\002\000\012\017\046\027\043\042\045" +
    "\060\044\001\002\000\024\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\035\ufff0\042\ufff0\001\002" +
    "\000\006\042\123\043\122\001\002\000\004\042\105\001" +
    "\002\000\004\017\074\001\002\000\006\042\050\043\047" +
    "\001\002\000\004\041\073\001\002\000\016\020\055\021" +
    "\053\022\056\023\051\041\052\060\054\001\002\000\004" +
    "\042\071\001\002\000\024\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\035\uffe7\042\uffe7\001\002" +
    "\000\004\042\067\001\002\000\004\042\063\001\002\000" +
    "\004\042\061\001\002\000\004\042\057\001\002\000\004" +
    "\041\060\001\002\000\024\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\014\uffec\015\uffec\016\uffec\035\uffec\042\uffec\001\002" +
    "\000\004\041\062\001\002\000\024\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\014\uffea\015\uffea\016\uffea\035\uffea\042\uffea" +
    "\001\002\000\004\032\064\001\002\000\004\033\065\001" +
    "\002\000\004\041\066\001\002\000\024\007\uffe2\010\uffe2" +
    "\011\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\035\uffe2\042" +
    "\uffe2\001\002\000\004\041\070\001\002\000\024\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\014\uffeb\015\uffeb\016\uffeb\035" +
    "\uffeb\042\uffeb\001\002\000\004\041\072\001\002\000\024" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\014\uffed\015\uffed\016" +
    "\uffed\035\uffed\042\uffed\001\002\000\024\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1\035\uffe1\042" +
    "\uffe1\001\002\000\004\053\075\001\002\000\004\042\076" +
    "\001\002\000\004\032\077\001\002\000\004\042\100\001" +
    "\002\000\004\060\101\001\002\000\004\042\102\001\002" +
    "\000\004\033\103\001\002\000\004\041\104\001\002\000" +
    "\024\007\uffe6\010\uffe6\011\uffe6\012\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\035\uffe6\042\uffe6\001\002\000\004\060\106\001" +
    "\002\000\004\042\107\001\002\000\004\032\110\001\002" +
    "\000\006\033\112\071\111\001\002\000\006\020\114\033" +
    "\115\001\002\000\004\041\113\001\002\000\024\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5\035" +
    "\uffe5\042\uffe5\001\002\000\004\042\117\001\002\000\004" +
    "\041\116\001\002\000\024\007\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\035\uffe4\042\uffe4\001\002" +
    "\000\004\033\120\001\002\000\004\041\121\001\002\000" +
    "\024\007\uffe3\010\uffe3\011\uffe3\012\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\035\uffe3\042\uffe3\001\002\000\004\041\125\001" +
    "\002\000\004\041\124\001\002\000\024\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9\035\uffe9\042" +
    "\uffe9\001\002\000\024\007\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\035\uffe8\042\uffe8\001\002\000" +
    "\006\007\130\042\131\001\002\000\004\033\173\001\002" +
    "\000\004\042\164\001\002\000\004\017\132\001\002\000" +
    "\004\043\133\001\002\000\004\041\134\001\002\000\006" +
    "\031\136\042\137\001\002\000\004\041\154\001\002\000" +
    "\006\033\uffce\041\uffce\001\002\000\006\024\140\026\141" +
    "\001\002\000\004\043\151\001\002\000\012\006\143\031" +
    "\144\042\145\043\142\001\002\000\006\033\uffcc\041\uffcc" +
    "\001\002\000\006\006\146\042\147\001\002\000\006\033" +
    "\uffcd\041\uffcd\001\002\000\006\033\uffcb\041\uffcb\001\002" +
    "\000\006\033\uffca\041\uffca\001\002\000\004\006\150\001" +
    "\002\000\006\033\uffc9\041\uffc9\001\002\000\004\026\152" +
    "\001\002\000\004\043\153\001\002\000\006\033\uffcf\041" +
    "\uffcf\001\002\000\010\030\156\033\uffc2\042\157\001\002" +
    "\000\004\033\uffc3\001\002\000\004\042\163\001\002\000" +
    "\006\027\160\030\161\001\002\000\004\043\162\001\002" +
    "\000\004\033\uffc0\001\002\000\004\033\uffc1\001\002\000" +
    "\004\033\uffbf\001\002\000\004\017\165\001\002\000\004" +
    "\043\166\001\002\000\004\041\167\001\002\000\006\031" +
    "\136\042\137\001\002\000\004\041\171\001\002\000\010" +
    "\030\156\033\uffc2\042\157\001\002\000\004\033\uffc4\001" +
    "\002\000\004\034\174\001\002\000\022\007\032\010\036" +
    "\011\031\012\026\014\034\015\025\016\040\042\041\001" +
    "\002\000\024\007\032\010\036\011\031\012\026\014\034" +
    "\015\025\016\040\035\203\042\041\001\002\000\024\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\035\ufff3\042\ufff3\001\002\000\024\007\uffef\010\uffef\011" +
    "\uffef\012\uffef\014\uffef\015\uffef\016\uffef\035\uffef\042\uffef" +
    "\001\002\000\024\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014" +
    "\ufff9\015\ufff9\016\ufff9\035\ufff9\042\ufff9\001\002\000\024" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\035\ufff5\042\ufff5\001\002\000\024\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\035\ufff7\042" +
    "\ufff7\001\002\000\024\007\uffc5\010\uffc5\011\uffc5\012\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\035\uffc5\042\uffc5\001\002\000" +
    "\024\007\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\035\ufff1\042\ufff1\001\002\000\004\035\ufffa\001" +
    "\002\000\004\042\221\001\002\000\012\017\213\027\210" +
    "\030\212\041\211\001\002\000\004\043\217\001\002\000" +
    "\024\007\uffe0\010\uffe0\011\uffe0\012\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\035\uffe0\042\uffe0\001\002\000\004\041\216\001" +
    "\002\000\004\043\214\001\002\000\004\041\215\001\002" +
    "\000\024\007\uffde\010\uffde\011\uffde\012\uffde\014\uffde\015" +
    "\uffde\016\uffde\035\uffde\042\uffde\001\002\000\024\007\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\014\uffdd\015\uffdd\016\uffdd\035" +
    "\uffdd\042\uffdd\001\002\000\004\041\220\001\002\000\024" +
    "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\035\uffdf\042\uffdf\001\002\000\004\041\222\001\002" +
    "\000\024\007\uffdc\010\uffdc\011\uffdc\012\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\035\uffdc\042\uffdc\001\002\000\022\007\032" +
    "\010\036\011\031\012\026\014\034\015\025\016\040\042" +
    "\041\001\002\000\024\007\032\010\036\011\031\012\026" +
    "\014\034\015\025\016\040\035\225\042\041\001\002\000" +
    "\004\015\226\001\002\000\004\032\227\001\002\000\006" +
    "\031\136\042\137\001\002\000\004\033\231\001\002\000" +
    "\004\041\232\001\002\000\024\007\uffc6\010\uffc6\011\uffc6" +
    "\012\uffc6\014\uffc6\015\uffc6\016\uffc6\035\uffc6\042\uffc6\001" +
    "\002\000\004\042\256\001\002\000\012\017\240\027\235" +
    "\030\237\041\236\001\002\000\004\043\254\001\002\000" +
    "\024\007\uffdb\010\uffdb\011\uffdb\012\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\035\uffdb\042\uffdb\001\002\000\004\041\253\001" +
    "\002\000\010\042\243\043\241\071\242\001\002\000\004" +
    "\041\252\001\002\000\004\041\251\001\002\000\004\060" +
    "\244\001\002\000\004\042\245\001\002\000\004\032\246" +
    "\001\002\000\004\033\247\001\002\000\004\041\250\001" +
    "\002\000\024\007\uffd8\010\uffd8\011\uffd8\012\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\035\uffd8\042\uffd8\001\002\000\024\007" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\035\uffd7\042\uffd7\001\002\000\024\007\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\035\uffd9\042\uffd9" +
    "\001\002\000\024\007\uffd6\010\uffd6\011\uffd6\012\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\035\uffd6\042\uffd6\001\002\000\004" +
    "\041\255\001\002\000\024\007\uffda\010\uffda\011\uffda\012" +
    "\uffda\014\uffda\015\uffda\016\uffda\035\uffda\042\uffda\001\002" +
    "\000\004\041\257\001\002\000\024\007\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\014\uffd5\015\uffd5\016\uffd5\035\uffd5\042\uffd5" +
    "\001\002\000\006\017\262\027\261\001\002\000\004\006" +
    "\271\001\002\000\004\006\263\001\002\000\006\006\264" +
    "\042\265\001\002\000\004\041\270\001\002\000\004\006" +
    "\266\001\002\000\004\041\267\001\002\000\024\007\uffd1" +
    "\010\uffd1\011\uffd1\012\uffd1\014\uffd1\015\uffd1\016\uffd1\035" +
    "\uffd1\042\uffd1\001\002\000\024\007\uffd3\010\uffd3\011\uffd3" +
    "\012\uffd3\014\uffd3\015\uffd3\016\uffd3\035\uffd3\042\uffd3\001" +
    "\002\000\006\006\272\042\273\001\002\000\004\041\276" +
    "\001\002\000\004\006\274\001\002\000\004\041\275\001" +
    "\002\000\024\007\uffd2\010\uffd2\011\uffd2\012\uffd2\014\uffd2" +
    "\015\uffd2\016\uffd2\035\uffd2\042\uffd2\001\002\000\024\007" +
    "\uffd4\010\uffd4\011\uffd4\012\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\035\uffd4\042\uffd4\001\002\000\006\031\136\042\137\001" +
    "\002\000\004\033\301\001\002\000\004\034\302\001\002" +
    "\000\022\007\032\010\036\011\031\012\026\014\034\015" +
    "\025\016\040\042\041\001\002\000\024\007\032\010\036" +
    "\011\031\012\026\014\034\015\025\016\040\035\304\042" +
    "\041\001\002\000\026\007\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\013\305\014\uffd0\015\uffd0\016\uffd0\035\uffd0\042\uffd0\001" +
    "\002\000\004\034\306\001\002\000\022\007\032\010\036" +
    "\011\031\012\026\014\034\015\025\016\040\042\041\001" +
    "\002\000\024\007\032\010\036\011\031\012\026\014\034" +
    "\015\025\016\040\035\310\042\041\001\002\000\024\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8" +
    "\035\uffc8\042\uffc8\001\002\000\006\031\136\042\137\001" +
    "\002\000\004\033\313\001\002\000\004\034\314\001\002" +
    "\000\022\007\032\010\036\011\031\012\026\014\034\015" +
    "\025\016\040\042\041\001\002\000\024\007\032\010\036" +
    "\011\031\012\026\014\034\015\025\016\040\035\316\042" +
    "\041\001\002\000\024\007\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\035\uffc7\042\uffc7\001\002\000" +
    "\006\040\320\042\321\001\002\000\004\032\331\001\002" +
    "\000\004\032\322\001\002\000\004\070\323\001\002\000" +
    "\004\042\324\001\002\000\004\033\325\001\002\000\004" +
    "\034\326\001\002\000\022\007\032\010\036\011\031\012" +
    "\026\014\034\015\025\016\040\042\041\001\002\000\024" +
    "\007\032\010\036\011\031\012\026\014\034\015\025\016" +
    "\040\035\330\042\041\001\002\000\004\035\ufffb\001\002" +
    "\000\004\070\332\001\002\000\004\042\333\001\002\000" +
    "\004\033\334\001\002\000\004\034\335\001\002\000\022" +
    "\007\032\010\036\011\031\012\026\014\034\015\025\016" +
    "\040\042\041\001\002\000\024\007\032\010\036\011\031" +
    "\012\026\014\034\015\025\016\040\035\337\042\041\001" +
    "\002\000\004\035\ufffc\001\002\000\004\002\001\001\002" +
    "\000\004\034\342\001\002\000\006\040\016\064\015\001" +
    "\002\000\004\035\344\001\002\000\004\002\ufffd\001\002" +
    "\000\004\042\356\001\002\000\004\042\347\001\002\000" +
    "\004\041\350\001\002\000\004\062\351\001\002\000\004" +
    "\042\352\001\002\000\004\034\353\001\002\000\006\040" +
    "\016\064\015\001\002\000\004\035\355\001\002\000\004" +
    "\002\000\001\002\000\004\034\357\001\002\000\006\040" +
    "\016\064\015\001\002\000\004\035\361\001\002\000\004" +
    "\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\004\003\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\036\005\027\007\034" +
    "\010\032\011\023\012\041\013\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\177\007\201\010\200\011\175\012" +
    "\203\013\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\167\001" +
    "\001\000\002\001\001\000\004\006\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\174\005\027\007" +
    "\034\010\032\011\023\012\041\013\026\001\001\000\016" +
    "\005\177\007\201\010\200\011\175\012\203\013\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\223\005\027" +
    "\007\034\010\032\011\023\012\041\013\026\001\001\000" +
    "\016\005\177\007\201\010\200\011\175\012\203\013\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\277\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\302\005\027\007\034\010" +
    "\032\011\023\012\041\013\026\001\001\000\016\005\177" +
    "\007\201\010\200\011\175\012\203\013\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\306\005\027" +
    "\007\034\010\032\011\023\012\041\013\026\001\001\000" +
    "\016\005\177\007\201\010\200\011\175\012\203\013\176" +
    "\001\001\000\002\001\001\000\004\014\311\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\314\005\027" +
    "\007\034\010\032\011\023\012\041\013\026\001\001\000" +
    "\016\005\177\007\201\010\200\011\175\012\203\013\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\326\005" +
    "\027\007\034\010\032\011\023\012\041\013\026\001\001" +
    "\000\016\005\177\007\201\010\200\011\175\012\203\013" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\335\005\027\007\034\010\032\011\023\012\041\013\026" +
    "\001\001\000\016\005\177\007\201\010\200\011\175\012" +
    "\203\013\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\342\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\353\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\357\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public int contador = 1;
    public Nodo padre;
    private Symbol s;

    @Override
    public void syntax_error(Symbol s){
        resultado +=  "Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido.\n";
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {




  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;
		int Opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String Op = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        tmp.addHijo(new Nodo(Op,parser.contador++));
        tmp.addHijo(new Nodo(id,parser.contador++));
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String Op = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        tmp.addHijo(new Nodo(id,parser.contador++));
        tmp.addHijo(new Nodo(Op,parser.contador++));
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String Op = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        tmp.addHijo(new Nodo(id,parser.contador++));
        tmp.addHijo(new Nodo(Op,parser.contador++));
        tmp.addHijo(new Nodo(num,parser.contador++));
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION_FOR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int obj2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int obj2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object obj2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp= new Nodo("Condición",parser.contador++);

        Nodo Nodo1= new Nodo("Declaración",parser.contador++);
        Nodo1.addHijo(new Nodo(id,parser.contador++));
        Nodo1.addHijo(new Nodo("=",parser.contador++));
        Nodo1.addHijo(new Nodo(num,parser.contador++));

        tmp.addHijo(Nodo1);
        tmp.addHijo((Nodo)obj);
        tmp.addHijo((Nodo)obj2);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int dato_left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int dato_right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		String dato_ = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int obj2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int obj2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object obj2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp= new Nodo("Condición",parser.contador++);

        Nodo Nodo1= new Nodo("Declaración",parser.contador++);

        Nodo1.addHijo(new Nodo(dato_,parser.contador++));
        Nodo1.addHijo(new Nodo(id,parser.contador++));
        Nodo1.addHijo(new Nodo("=",parser.contador++));
        Nodo1.addHijo(new Nodo(num,parser.contador++));

        tmp.addHijo(Nodo1);
        tmp.addHijo((Nodo)obj);
        tmp.addHijo((Nodo)obj2);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int obj2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int obj2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object obj2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo tmp= new Nodo("For",parser.contador++);
        tmp.addHijo(new Nodo("for",parser.contador++));
        tmp.addHijo((Nodo)obj);

        Nodo aux= new Nodo("Sentencia",parser.contador++);
        aux.addHijo((Nodo)obj2);
        tmp.addHijo(aux);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int obj2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int obj2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object obj2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Nodo tmp= new Nodo("Do_While",parser.contador++);
        tmp.addHijo(new Nodo("do",parser.contador++));
        tmp.addHijo((Nodo)obj);   //ojo! Al añadirlo directo se elimina el problema de doble sentencia en el graph
        tmp.addHijo(new Nodo("while",parser.contador++));
        Nodo aux= new Nodo("Condición",parser.contador++);
        aux.addHijo((Nodo)obj2);
        tmp.addHijo(aux);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int obj2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int obj2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object obj2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo tmp= new Nodo("While",parser.contador++);
        tmp.addHijo(new Nodo("while",parser.contador++));

        Nodo nudo1 = new Nodo("Condición",parser.contador++);
        nudo1.addHijo((Nodo)obj);
        tmp.addHijo(nudo1);

        Nodo aux= new Nodo("Sentencia",parser.contador++);
        aux.addHijo((Nodo)obj2);
        tmp.addHijo(aux);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int obj2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int obj2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object obj2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int obj3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int obj3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object obj3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo tmp= new Nodo("If_Else",parser.contador++);

        Nodo nudo1 = new Nodo("if",parser.contador++);
        
        Nodo nudo2 = new Nodo("Condición",parser.contador++);
        nudo2.addHijo((Nodo)obj);

        Nodo nudo3 = new Nodo("Sentencia",parser.contador++);
        nudo3.addHijo((Nodo)obj2);
        
        Nodo nudo4 = new Nodo("else",parser.contador++);

        Nodo nudo5 = new Nodo("Sentencia",parser.contador++);
        nudo5.addHijo((Nodo)obj3);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        tmp.addHijo(nudo4);
        tmp.addHijo(nudo5);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Boole",parser.contador++);
        tmp.addHijo(new Nodo(id,parser.contador++));
        tmp.addHijo(new Nodo(op,parser.contador++));
        tmp.addHijo(new Nodo(id2,parser.contador++));
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
	Nodo tmp = new Nodo("Boole",parser.contador++);
        tmp.addHijo(new Nodo(id,parser.contador++));
        tmp.addHijo(new Nodo(op,parser.contador++));
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Boole",parser.contador++);
        tmp.addHijo(new Nodo(id,parser.contador++));
        tmp.addHijo(new Nodo(op,parser.contador++));
        tmp.addHijo(new Nodo(id2,parser.contador++));
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Boole",parser.contador++);
        tmp.addHijo(new Nodo(id,parser.contador++));
        tmp.addHijo(new Nodo(op,parser.contador++));
        tmp.addHijo(new Nodo(num,parser.contador++));
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Boole",parser.contador++);
        tmp.addHijo(new Nodo(id,parser.contador++));
        tmp.addHijo(new Nodo(op,parser.contador++));
        tmp.addHijo(new Nodo(op2,parser.contador++));
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo(id,parser.contador++);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_BOOLEANA ::= Identificador Mod Numero Op_relacional Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Boole",parser.contador++);
        tmp.addHijo(new Nodo(id,parser.contador++));
        tmp.addHijo(new Nodo("%",parser.contador++));
        tmp.addHijo(new Nodo(num,parser.contador++));
        tmp.addHijo(new Nodo(op,parser.contador++));
        tmp.addHijo(new Nodo(num2,parser.contador++));
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int obj2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int obj2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object obj2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo tmp= new Nodo("IF",parser.contador++);

        Nodo nudo1 = new Nodo("if",parser.contador++);
        
        Nodo nudo2 = new Nodo("Condición",parser.contador++);
        nudo2.addHijo((Nodo)obj);

        Nodo nudo3 = new Nodo("Sentencia",parser.contador++);
        nudo3.addHijo((Nodo)obj2);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(id,parser.contador++);
        Nodo nudo2 = new Nodo(id2,parser.contador++);
        Nodo nudo3 = new Nodo("=",parser.contador++);
        Nodo nudo4 = new Nodo("\\\\\"" + id3 +  "\\\\\"",parser.contador++);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        tmp.addHijo(nudo4);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int id4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id4 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(id,parser.contador++);
        Nodo nudo2 = new Nodo(id2,parser.contador++);
        Nodo nudo3 = new Nodo(id3,parser.contador++);
        Nodo nudo4 = new Nodo("\\\\\"" + id4 +  "\\\\\"",parser.contador++);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        tmp.addHijo(nudo4);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(id,parser.contador++);
        Nodo nudo2 = new Nodo(id2,parser.contador++);
        Nodo nudo3 = new Nodo("=",parser.contador++);
        Nodo nudo4 = new Nodo("\\\\\"" + "\\\\\"",parser.contador++);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        tmp.addHijo(nudo4);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(id,parser.contador++);
        Nodo nudo2 = new Nodo(id2,parser.contador++);
        Nodo nudo3 = new Nodo(id3,parser.contador++);
        Nodo nudo4 = new Nodo("\\\\\"" + "\\\\\"",parser.contador++);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        tmp.addHijo(nudo4);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(dato,parser.contador++);
        Nodo nudo2 = new Nodo(id,parser.contador++);
        Nodo nudo3 = new Nodo(id2,parser.contador++);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(dato,parser.contador++);
        Nodo nudo2 = new Nodo(id,parser.contador++);
        Nodo nudo3 = new Nodo(id2,parser.contador++);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= T_dato Identificador Igual Texto P_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int texleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int texright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(dato,parser.contador++);
        Nodo nudo2 = new Nodo(id,parser.contador++);
        Nodo nudo3 = new Nodo("=",parser.contador++);
        String Cadena = tex.toString().replaceAll("\"", "\\\\\"");
        Nodo nudo4 = new Nodo(Cadena,parser.contador++);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        tmp.addHijo(nudo4);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= T_dato Identificador Igual Identificador Punto Identificador Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(dato,parser.contador++);
        Nodo nudo2 = new Nodo(id,parser.contador++);
        Nodo nudo3 = new Nodo("=",parser.contador++);
        Nodo nudo4 = new Nodo(id2,parser.contador++);
        Nodo nudo5 = new Nodo(id3,parser.contador++);
        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        tmp.addHijo(nudo4);
        tmp.addHijo(nudo4);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(dato,parser.contador++);
        Nodo nudo2 = new Nodo(id,parser.contador++);
        Nodo nudo3 = new Nodo("=",parser.contador++);
        Nodo nudo4 = new Nodo(num,parser.contador++);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        tmp.addHijo(nudo4);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int id4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int id4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id4 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        tmp.addHijo(new Nodo(id,parser.contador++));
        tmp.addHijo(new Nodo(id2,parser.contador++));
        tmp.addHijo(new Nodo(id3,parser.contador++));
        tmp.addHijo(new Nodo(id4,parser.contador++));
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(dato,parser.contador++);
        
        Nodo nudo2 = new Nodo(id,parser.contador++);

        Nodo nudo3 = new Nodo(";",parser.contador++);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        tmp.addHijo(new Nodo("int",parser.contador++));
        tmp.addHijo(new Nodo(id,parser.contador++));
        tmp.addHijo(new Nodo(id2,parser.contador++));
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        tmp.addHijo(new Nodo("int",parser.contador++));
        tmp.addHijo(new Nodo(id,parser.contador++));
        tmp.addHijo(new Nodo(id2,parser.contador++));
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        tmp.addHijo(new Nodo("int",parser.contador++));
        tmp.addHijo(new Nodo(id,parser.contador++));
        tmp.addHijo(new Nodo("=",parser.contador++));
        tmp.addHijo(new Nodo(num,parser.contador++));
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        tmp.addHijo(new Nodo("int",parser.contador++));
        tmp.addHijo(new Nodo(id,parser.contador++));
        tmp.addHijo(new Nodo(op,parser.contador++));
        tmp.addHijo(new Nodo(num,parser.contador++));
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        tmp.addHijo(new Nodo(id,parser.contador++));
        tmp.addHijo(new Nodo(id2,parser.contador++));
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        tmp.addHijo(new Nodo(id,parser.contador++));
        tmp.addHijo(new Nodo("=",parser.contador++));
        tmp.addHijo(new Nodo(num,parser.contador++));
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Identificador Igual Identificador Punto Identificador Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(dato,parser.contador++);
        Nodo nudo2 = new Nodo("=",parser.contador++);
        Nodo nudo3 = new Nodo(id,parser.contador++);
        Nodo nudo4 = new Nodo(id2,parser.contador++);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        tmp.addHijo(nudo4);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Identificador Punto Identificador Punto Identificador Parentesis_a Texto Suma Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(dato,parser.contador++);
        Nodo nudo2 = new Nodo(id,parser.contador++);
        Nodo nudo3 = new Nodo(id2,parser.contador++);
        String Cadena = text.toString().replaceAll("\"", "\\\\\"");
        Nodo nudo4 = new Nodo(Cadena,parser.contador++);
        Nodo nudo5 = new Nodo("+",parser.contador++);
        Nodo nudo6 = new Nodo(id3,parser.contador++);
        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        tmp.addHijo(nudo4);
        tmp.addHijo(nudo5);
        tmp.addHijo(nudo6);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Identificador Punto Identificador Punto Identificador Parentesis_a Texto Parentesis_c P_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(dato,parser.contador++);
        Nodo nudo2 = new Nodo(id,parser.contador++);
        Nodo nudo3 = new Nodo(id2,parser.contador++);
        //String Cadena = text.toString().replaceAll("\"", ""); //Reemplaza los "" por vacio
        String Cadena = text.toString().replaceAll("\"", "\\\\\"");
        Nodo nudo4 = new Nodo(Cadena,parser.contador++);
        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        tmp.addHijo(nudo4);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Identificador Punto Identificador Punto Identificador Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(dato,parser.contador++);
        Nodo nudo2 = new Nodo(id,parser.contador++);
        Nodo nudo3 = new Nodo(id2,parser.contador++);
        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Identificador Identificador Igual New Identificador Parentesis_a Identificador Punto Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(dato,parser.contador++);
        Nodo nudo2 = new Nodo(id,parser.contador++);
        Nodo nudo3 = new Nodo("=",parser.contador++);
        Nodo nudo4 = new Nodo(id2,parser.contador++);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        tmp.addHijo(nudo4);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String dato2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(dato,parser.contador++);
        Nodo nudo2 = new Nodo("=",parser.contador++);
        Nodo nudo3 = new Nodo(dato2,parser.contador++);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String dato2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(dato,parser.contador++);
        Nodo nudo2 = new Nodo(id,parser.contador++);
        Nodo nudo3 = new Nodo(dato2,parser.contador++);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Identificador Op_atribucion Identificador P_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String dato2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(dato,parser.contador++);
        Nodo nudo2 = new Nodo(id,parser.contador++);
        Nodo nudo3 = new Nodo(dato2,parser.contador++);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Identificador Igual Identificador Suma Identificador P_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String dato2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int dato3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dato3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String dato3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(dato,parser.contador++);
        Nodo nudo2 = new Nodo("=",parser.contador++);
        Nodo nudo3 = new Nodo(dato2,parser.contador++);
        Nodo nudo4 = new Nodo("+",parser.contador++);
        Nodo nudo5 = new Nodo(dato3,parser.contador++);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        tmp.addHijo(nudo4);
        tmp.addHijo(nudo5);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Identificador Igual Identificador Resta Identificador P_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String dato2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int dato3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dato3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String dato3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(dato,parser.contador++);
        Nodo nudo2 = new Nodo("=",parser.contador++);
        Nodo nudo3 = new Nodo(dato2,parser.contador++);
        Nodo nudo4 = new Nodo("-",parser.contador++);
        Nodo nudo5 = new Nodo(dato3,parser.contador++);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        tmp.addHijo(nudo4);
        tmp.addHijo(nudo5);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Identificador Igual Identificador Multiplicacion Identificador P_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String dato2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int dato3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dato3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String dato3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(dato,parser.contador++);
        Nodo nudo2 = new Nodo("=",parser.contador++);
        Nodo nudo3 = new Nodo(dato2,parser.contador++);
        Nodo nudo4 = new Nodo("*",parser.contador++);
        Nodo nudo5 = new Nodo(dato3,parser.contador++);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        tmp.addHijo(nudo4);
        tmp.addHijo(nudo5);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Identificador Igual Identificador Division Identificador P_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String dato2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int dato3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dato3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String dato3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	Nodo tmp = new Nodo("Declaración",parser.contador++);
        Nodo nudo1 = new Nodo(dato,parser.contador++);
        Nodo nudo2 = new Nodo("=",parser.contador++);
        Nodo nudo3 = new Nodo(dato2,parser.contador++);
        Nodo nudo4 = new Nodo("/",parser.contador++);
        Nodo nudo5 = new Nodo(dato3,parser.contador++);

        tmp.addHijo(nudo1);
        tmp.addHijo(nudo2);
        tmp.addHijo(nudo3);
        tmp.addHijo(nudo4);
        tmp.addHijo(nudo5);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Sentencia",parser.contador++);
        tmp.addHijo((Nodo)obj);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int obj2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int obj2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object obj2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Sentencia",parser.contador++);
        tmp.addHijo((Nodo)obj);
        tmp.addHijo((Nodo)obj2);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Sentencia",parser.contador++);
        tmp.addHijo((Nodo)obj);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int obj2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int obj2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object obj2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Sentencia",parser.contador++);
        tmp.addHijo((Nodo)obj);
        tmp.addHijo((Nodo)obj2);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Sentencia",parser.contador++);
        tmp.addHijo((Nodo)obj);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int obj2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int obj2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object obj2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Sentencia",parser.contador++);
        tmp.addHijo((Nodo)obj);
        tmp.addHijo((Nodo)obj2);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Sentencia",parser.contador++);
        tmp.addHijo((Nodo)obj);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int obj2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int obj2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object obj2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Sentencia",parser.contador++);
        tmp.addHijo((Nodo)obj);
        tmp.addHijo((Nodo)obj2);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= IF 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Sentencia",parser.contador++);
        tmp.addHijo((Nodo)obj);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int obj2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int obj2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object obj2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Sentencia",parser.contador++);
        tmp.addHijo((Nodo)obj);
        tmp.addHijo((Nodo)obj2);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Sentencia",parser.contador++);
        tmp.addHijo((Nodo)obj);
        RESULT=obj;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int obj2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int obj2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object obj2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	Nodo tmp = new Nodo("Sentencia",parser.contador++);
        tmp.addHijo((Nodo)obj);
        tmp.addHijo((Nodo)obj2);
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo tmp = new Nodo("main",parser.contador++);
        tmp.addHijo((Nodo)obj);
        parser.padre = (Nodo) tmp;
        System.out.println("OK");
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Clase_s Void Identificador Parentesis_a Arreglo_String Identificador Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Nodo tmp = new Nodo(id,parser.contador++);
        tmp.addHijo((Nodo)obj);
        parser.padre = (Nodo) tmp;
        System.out.println("OK");
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Clase_s Void Main Parentesis_a Arreglo_String Identificador Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Nodo tmp = new Nodo("main",parser.contador++);
        tmp.addHijo((Nodo)obj);
        parser.padre = (Nodo) tmp;
        System.out.println("OK");
        RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASE ::= Clase_p Identificador Llave_a INICIO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASE ::= paquete Identificador P_coma Clase_p Identificador Llave_a INICIO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASE ::= Importe Clase_p Identificador Llave_a INICIO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CLASE ::= Importe paquete Identificador P_coma Clase_p Identificador Llave_a INICIO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CLASE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


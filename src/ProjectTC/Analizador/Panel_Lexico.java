/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ProjectTC.Analizador;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author joshg
 */
public class Panel_Lexico extends javax.swing.JPanel {
    DefaultTableModel modelo;
    /**
     * Creates new form Panel_Sintatico
     */
    public Panel_Lexico() {
        initComponents();
        this.modelo = (DefaultTableModel) tbResultado.getModel();
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer)tbResultado.getDefaultRenderer(Object.class);
        renderer.setHorizontalAlignment( SwingConstants.CENTER );
        tbResultado.getColumnModel().getColumn(0).setPreferredWidth(5);
        tbResultado.getColumnModel().getColumn(2).setPreferredWidth(15);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel1 = new keeptoo.KGradientPanel();
        jPanel1 = new javax.swing.JPanel();
        line3 = new javax.swing.JTextField();
        line = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtCodigo = new javax.swing.JTextArea();
        KAnalizar = new keeptoo.KGradientPanel();
        btnAnalizar = new javax.swing.JButton();
        btnAbrir = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        line4 = new javax.swing.JTextField();
        line2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbResultado = new javax.swing.JTable();
        KLimpiar = new keeptoo.KGradientPanel();
        btnLimpiar = new javax.swing.JButton();

        setBackground(new java.awt.Color(123, 156, 225));
        setMinimumSize(new java.awt.Dimension(880, 618));
        setPreferredSize(new java.awt.Dimension(880, 618));
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                formAncestorResized(evt);
            }
        });

        kGradientPanel1.setkEndColor(new java.awt.Color(71, 120, 197));
        kGradientPanel1.setkStartColor(new java.awt.Color(71, 120, 197));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(102, 102, 102));

        line3.setEditable(false);
        line3.setBackground(new java.awt.Color(255, 255, 255));
        line3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        line3.setForeground(new java.awt.Color(102, 102, 102));
        line3.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(12, 91, 160)));
        line3.setFocusable(false);
        line3.setRequestFocusEnabled(false);

        line.setEditable(false);
        line.setBackground(new java.awt.Color(255, 255, 255));
        line.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        line.setForeground(new java.awt.Color(102, 102, 102));
        line.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(12, 91, 160)));
        line.setFocusable(false);
        line.setRequestFocusEnabled(false);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("<html>\nIngrese las Sentencias\n</html>");

        txtCodigo.setColumns(20);
        txtCodigo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtCodigo.setForeground(new java.awt.Color(102, 102, 102));
        txtCodigo.setRows(5);
        txtCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodigoKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(txtCodigo);

        KAnalizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KAnalizarMousePressed(evt);
            }
        });

        btnAnalizar.setBackground(new java.awt.Color(169, 224, 49));
        btnAnalizar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAnalizar.setForeground(new java.awt.Color(255, 255, 255));
        btnAnalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-letra-pequeña-24.png"))); // NOI18N
        btnAnalizar.setText("Analizar");
        btnAnalizar.setToolTipText("Analizar Código");
        btnAnalizar.setBorder(null);
        btnAnalizar.setBorderPainted(false);
        btnAnalizar.setContentAreaFilled(false);
        btnAnalizar.setFocusPainted(false);
        btnAnalizar.setHideActionText(true);
        btnAnalizar.setRequestFocusEnabled(false);
        btnAnalizar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-letra-pequeña-24 (1).png"))); // NOI18N
        btnAnalizar.setVerifyInputWhenFocusTarget(false);
        btnAnalizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAnalizarMouseClicked(evt);
            }
        });
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        btnAbrir.setBackground(new java.awt.Color(169, 224, 49));
        btnAbrir.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAbrir.setForeground(new java.awt.Color(255, 255, 255));
        btnAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-abrir-carpeta-24.png"))); // NOI18N
        btnAbrir.setText("Abrir Código");
        btnAbrir.setToolTipText("Abrir Código");
        btnAbrir.setBorder(null);
        btnAbrir.setBorderPainted(false);
        btnAbrir.setContentAreaFilled(false);
        btnAbrir.setFocusPainted(false);
        btnAbrir.setHideActionText(true);
        btnAbrir.setRequestFocusEnabled(false);
        btnAbrir.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-abrir-carpeta-24 (1).png"))); // NOI18N
        btnAbrir.setVerifyInputWhenFocusTarget(false);
        btnAbrir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAbrirMouseClicked(evt);
            }
        });
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout KAnalizarLayout = new javax.swing.GroupLayout(KAnalizar);
        KAnalizar.setLayout(KAnalizarLayout);
        KAnalizarLayout.setHorizontalGroup(
            KAnalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, KAnalizarLayout.createSequentialGroup()
                .addComponent(btnAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        KAnalizarLayout.setVerticalGroup(
            KAnalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, KAnalizarLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(KAnalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, KAnalizarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(line)
                    .addComponent(line3)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel3)
                    .addComponent(KAnalizar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(line3, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(line, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setForeground(new java.awt.Color(102, 102, 102));

        line4.setEditable(false);
        line4.setBackground(new java.awt.Color(255, 255, 255));
        line4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        line4.setForeground(new java.awt.Color(102, 102, 102));
        line4.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(12, 91, 160)));
        line4.setFocusable(false);
        line4.setRequestFocusEnabled(false);

        line2.setEditable(false);
        line2.setBackground(new java.awt.Color(255, 255, 255));
        line2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        line2.setForeground(new java.awt.Color(102, 102, 102));
        line2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(12, 91, 160)));
        line2.setFocusable(false);
        line2.setRequestFocusEnabled(false);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("<html>\nResultado del Analisis\n</html>");

        jScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        tbResultado.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tbResultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Linea", "Tipo", "Simbolo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbResultado.setGridColor(new java.awt.Color(255, 255, 255));
        tbResultado.setRowHeight(22);
        jScrollPane2.setViewportView(tbResultado);

        btnLimpiar.setBackground(new java.awt.Color(169, 224, 49));
        btnLimpiar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-borrar-24.png"))); // NOI18N
        btnLimpiar.setText("Limpiar Todo");
        btnLimpiar.setToolTipText("Limpiar Todo");
        btnLimpiar.setBorder(null);
        btnLimpiar.setBorderPainted(false);
        btnLimpiar.setContentAreaFilled(false);
        btnLimpiar.setFocusPainted(false);
        btnLimpiar.setHideActionText(true);
        btnLimpiar.setRequestFocusEnabled(false);
        btnLimpiar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-borrar-24 (1).png"))); // NOI18N
        btnLimpiar.setVerifyInputWhenFocusTarget(false);
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout KLimpiarLayout = new javax.swing.GroupLayout(KLimpiar);
        KLimpiar.setLayout(KLimpiarLayout);
        KLimpiarLayout.setHorizontalGroup(
            KLimpiarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        KLimpiarLayout.setVerticalGroup(
            KLimpiarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(line2)
                    .addComponent(line4)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(KLimpiar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(line4, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(line2, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel1Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel1Layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtCodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoKeyTyped
        
    }//GEN-LAST:event_txtCodigoKeyTyped

    private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized
        
    }//GEN-LAST:event_formAncestorResized

    private void KAnalizarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_KAnalizarMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_KAnalizarMousePressed

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        String aux = "";
        String texto = "";
        
        try {
            JFileChooser chooser = new JFileChooser(System.getProperty("user.dir"));
            FileNameExtensionFilter fi = new FileNameExtensionFilter("txt", "txt");
            chooser.setFileFilter(fi);
            int se = chooser.showOpenDialog(null);
            if (se == 0) {
                File archivo = chooser.getSelectedFile();
                FileReader archivos = new FileReader(archivo);
                try (BufferedReader leer = new BufferedReader(archivos)) {
                    while ((aux = leer.readLine()) != null) {
                        texto += aux + "\n";
                    }
                    leer.close();
                }
                txtCodigo.setText(texto);
                jScrollPane1.getVerticalScrollBar().setValue(0);
                
                Reader lector = new BufferedReader(new FileReader(chooser.getSelectedFile()));      
                AnalizadorLexico lexer = new AnalizadorLexico(lector);
                analizarLexico(lexer);
            } else {
                //JOptionPane.showMessageDialog(null, "No selecciono");
            }          
        } catch (FileNotFoundException ex) {
                Logger.getLogger(Panel_Lexico.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
                Logger.getLogger(Panel_Lexico.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnAbrirActionPerformed

    private void btnAbrirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAbrirMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAbrirMouseClicked

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        txtCodigo.setText("");
        for (int i = (modelo.getRowCount()-1);i>=0; i--)
            modelo.removeRow(i);
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnAnalizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAnalizarMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAnalizarMouseClicked

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        String expr = (String) txtCodigo.getText();
        AnalizadorLexico lexer = new AnalizadorLexico(new StringReader(expr));
        try {
            analizarLexico(lexer);
        } catch (IOException ex) {
            Logger.getLogger(Panel_Lexico.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAnalizarActionPerformed

    public void RedimFull(boolean Redimenzionar){
        System.out.println(btnAnalizar.getBounds());
        
        if(Redimenzionar){
            this.setBounds(0, 0, 1110, 619);
            //int x, int y, int width, int heigh
            kGradientPanel1.setBounds(0, 0, 1110, 619);
            jPanel1.setBounds(25,38,520,552);
            jPanel3.setBounds(565,38,520,552);
            line.setBounds(30,487,460,3);
            line2.setBounds(30,487,460,3);
            line3.setBounds(30,38,460,5);
            line4.setBounds(30,38,460,5);
            
            jLabel3.setBounds(30,12,460,20);
            txtCodigo.setBounds(30,49,460,432);
            jScrollPane1.setBounds(30,49,460,432);
            KAnalizar.setSize(460,44);
            
            btnAbrir.setBounds(0,0,220,44);
            jSeparator1.setLocation(230, 12);
            btnAnalizar.setBounds(240,0,220,44);
            
            jLabel5.setBounds(30,12,460,20);
            tbResultado.setBounds(30,49,460,432);
            jScrollPane2.setBounds(30,49,460,432);
            KLimpiar.setSize(460,44);
            btnLimpiar.setSize(460,44);
            //btnLimpiar.setBounds(30,496,460,44);
        }else{
            
            this.setBounds(0,0,880,618);
            kGradientPanel1.setBounds(0,0,880,618);
            jPanel1.setBounds(18,38,404,552);
            jPanel3.setBounds(452,38,400,552);
            line.setBounds(30,487,344,3);
            line2.setBounds(30,487,340,3);
            line3.setBounds(30,38,344,5);
            line4.setBounds(30,38,340,5);
            
            jLabel3.setBounds(30,12,344,20);
            txtCodigo.setBounds(30,49,344,432);
            jScrollPane1.setBounds(30,49,344,432);
            KAnalizar.setSize(344,44);
            
            btnAbrir.setBounds(0,0,159,44);
            jSeparator1.setLocation(171, 12);
            btnAnalizar.setBounds(185,0,159,44);
            
            jLabel5.setBounds(30,12,340,20);
            tbResultado.setBounds(30,49,340,432);
            jScrollPane2.setBounds(30,49,340,432);
            KLimpiar.setBounds(30,496,340,44);
            btnLimpiar.setSize(340,44);
            //btnLimpiar.setBounds(30,496,340,44);
        }
    }
    
    private void analizarLexico(AnalizadorLexico lexer) throws IOException{
        for (int i = (modelo.getRowCount()-1);i>=0; i--)
            modelo.removeRow(i);
        
        int cont = 1;
        while (true) {
            Tokens token = lexer.yylex();
            if (token == null) {
                return;
            }
            switch (token) {
                case Linea:
                    cont++;
                    break;
                case Comillas:
                    modelo.addRow(new Object[]{cont,"<Comillas>",lexer.lexeme});
                    break;
                case Cadena:
                    modelo.addRow(new Object[]{cont,"<Tipo de dato>",lexer.lexeme});
                    break;
                case T_dato:
                    modelo.addRow(new Object[]{cont,"<Tipo de dato>",lexer.lexeme});
                    break;
                case If:
                    modelo.addRow(new Object[]{cont,"<Reservada if>",lexer.lexeme});
                    break;
                case Else:
                    modelo.addRow(new Object[]{cont,"<Reservada else>",lexer.lexeme});
                    break;
                case Do:
                    modelo.addRow(new Object[]{cont,"<Reservada do>",lexer.lexeme});
                    break;
                case While:
                    modelo.addRow(new Object[]{cont,"<Reservada if>",lexer.lexeme});
                    break;
                case For:
                    modelo.addRow(new Object[]{cont,"<Reservada For>",lexer.lexeme});
                    break;
                case Igual:
                    modelo.addRow(new Object[]{cont,"<Operador igual>",lexer.lexeme});
                    break;
                case Suma:
                    modelo.addRow(new Object[]{cont,"<Operador suma>",lexer.lexeme});
                    break;
                case Resta:
                    modelo.addRow(new Object[]{cont,"<Operador resta>",lexer.lexeme});
                    break;
                case Multiplicacion:
                    modelo.addRow(new Object[]{cont,"<Operador multiplicacion>",lexer.lexeme});
                    break;
                case Division:
                    modelo.addRow(new Object[]{cont,"<Operador division>",lexer.lexeme});
                    break;
                case Op_logico:
                    modelo.addRow(new Object[]{cont,"<Operador logico>",lexer.lexeme});
                    break;
                case Op_incremento:
                    modelo.addRow(new Object[]{cont,"<Operador incremento>",lexer.lexeme});
                    break;
                case Op_relacional:
                    modelo.addRow(new Object[]{cont,"<Operador relacional>",lexer.lexeme});
                    break;
                case Op_atribucion:
                    modelo.addRow(new Object[]{cont,"<Operador atribucion>",lexer.lexeme});
                    break;
                case Op_booleano:
                    modelo.addRow(new Object[]{cont,"<Operador booleano>",lexer.lexeme});
                    break;
                case Parentesis_a:
                    modelo.addRow(new Object[]{cont,"<Parentesis de apertura>",lexer.lexeme});
                    break;
                case Parentesis_c:
                    modelo.addRow(new Object[]{cont,"<Parentesis de cierre>",lexer.lexeme});
                    break;
                case Llave_a:
                    modelo.addRow(new Object[]{cont,"<Llave de apertura>",lexer.lexeme});
                    break;
                case Llave_c:
                    modelo.addRow(new Object[]{cont,"<Llave de cierre>",lexer.lexeme});
                    break;
                case Corchete_a:
                    modelo.addRow(new Object[]{cont,"<Corchete de apertura>",lexer.lexeme});
                    break;
                case Corchete_c:
                    modelo.addRow(new Object[]{cont,"<Corchete de cierre>",lexer.lexeme});
                    break;
                case Main:
                    modelo.addRow(new Object[]{cont,"<Reservada main>",lexer.lexeme});
                    break;
                case P_coma:
                    modelo.addRow(new Object[]{cont,"<Punto y coma>",lexer.lexeme});
                    break;
                case Identificador:
                    modelo.addRow(new Object[]{cont,"<Identificador>",lexer.lexeme});
                    break;
                case Numero:
                    modelo.addRow(new Object[]{cont,"<Numero>",lexer.lexeme});
                    break;
                case Arreglo_String:
                    modelo.addRow(new Object[]{"" + cont,"<Arreglo de String>",lexer.lexeme});
                    break;
                case Arreglo_Int:
                    modelo.addRow(new Object[]{"" + cont,"<Arreglo de Int>",lexer.lexeme});
                    break;
                case Arreglo_Float:
                    modelo.addRow(new Object[]{"" + cont,"<Arreglo de Float>",lexer.lexeme});
                    break;
                case New:
                    modelo.addRow(new Object[]{"" + cont,"<Invocador>",lexer.lexeme});
                    break;
                case Public:
                    modelo.addRow(new Object[]{"" + cont,"<Modificador de acceso>",lexer.lexeme});
                    break;
                case Void:
                    modelo.addRow(new Object[]{"" + cont,"<Retorno nulo>",lexer.lexeme});
                    break;  
                case Private:
                    modelo.addRow(new Object[]{"" + cont,"<Modoficador de acceso>",lexer.lexeme});
                    break;
                case Matriz_e:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Matriz de entero>",lexer.lexeme});
                    break;
                case Matriz_c:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Matriz de caracteres>",lexer.lexeme});
                    break;
               case Matriz_s:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Matriz de String>",lexer.lexeme});
                    break;
                case Clase_p:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Clase publica>",lexer.lexeme});
                    break;
                case Clase_s:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Clase static>",lexer.lexeme});
                    break;
                case paquete:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Paquete>",lexer.lexeme});
                    break;
                case Importacion:
                    modelo.addRow(new Object[]{"" + cont,"<Importacion de libreria>",lexer.lexeme});  
                    break;
                 case Punto:
                    modelo.addRow(new Object[]{"" + cont,"<Signo punto>",lexer.lexeme});  
                    break;
                 case Dos_puntos:
                    modelo.addRow(new Object[]{"" + cont,"<Signo Dos puntos>",lexer.lexeme});  
                    break;
                 case Comentario:
                    modelo.addRow(new Object[]{"" + cont,"<Comentarios>",lexer.lexeme});  
                    break;
                 case Captura_d:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Captura de datos>",lexer.lexeme});  
                    break;
                 case casos:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Swicht>",lexer.lexeme});  
                    break;
                 case Captura_e:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Captura de dato entera >",lexer.lexeme});  
                    break;
                case Captura_do:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Captura de dato dooble>",lexer.lexeme});  
                    break;
                case Captura_t:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Captura de dato String>",lexer.lexeme});  
                    break;
                case Impresion_p:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Impresion de Pantalla>",lexer.lexeme});  
                    break; 
                case funcClase:
                    modelo.addRow(new Object[]{"" + cont,"<Función de una Clase>",lexer.lexeme});  
                    break;
                case Ath:
                    modelo.addRow(new Object[]{"" + cont,"<Clase Math>",lexer.lexeme});  
                    break;
                case Abstracto:  
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Metodode implementacion Abstracto>",lexer.lexeme});  
                    break;
                case V_f:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada describe un predicado (una declaración de verdadero / falso)>",lexer.lexeme});  
                    break;    
                case Num:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada para declarar un tipo enumerado>",lexer.lexeme});  
                    break;  
                case Exportar:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada para modular para exportar un paquete con un módulo>",lexer.lexeme});  
                    break; 
                case Fnl:  
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Defina una entidad una vez que no se puede cambiar ni derivar de más adelante>",lexer.lexeme});  
                    break;    
                case Extender:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada para declaración de clase para especificar la superclase>",lexer.lexeme});  
                    break;  
                case Impleme:  
                    modelo.addRow(new Object[]{"" + cont,"<Reservada declaración de clase para especificar una o más interfaces implementadas por la clase actual>",lexer.lexeme});  
                    break;
                case Const:  
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Para definir constantes en Java >",lexer.lexeme});  
                    break;    
                case Inta:  
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Se utiliza para representar una instancia de la clase en la que aparece. >",lexer.lexeme});  
                    break;
                case Return:
                    modelo.addRow(new Object[]{"" + cont,"<Retorna un valor>",lexer.lexeme});  
                    break;
                case ERROR:
                    modelo.addRow(new Object[]{cont,"<Simbolo no definido>",lexer.lexeme});
                    break;
                default:
                    modelo.addRow(new Object[]{cont,"<" + lexer.lexeme + ">",lexer.lexeme});
                    break;
            }
        } 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private keeptoo.KGradientPanel KAnalizar;
    private keeptoo.KGradientPanel KLimpiar;
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private keeptoo.KGradientPanel kGradientPanel1;
    private javax.swing.JTextField line;
    private javax.swing.JTextField line2;
    private javax.swing.JTextField line3;
    private javax.swing.JTextField line4;
    private javax.swing.JTable tbResultado;
    private javax.swing.JTextArea txtCodigo;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ProjectTC.Analizador;

import static ProjectTC.Analizador.Panel_Sintactico.Console;
import java.awt.Color;
import java.awt.Image;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.nio.file.Files;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/**
 *
 * @author joshg
 */
public class Panel_Sintactico extends javax.swing.JPanel {
    private final JFrame padre;
    private boolean Generando = false;
    private final DefaultTableModel modelo;
    
    /**
     * Creates new form Panel_Sintatico
     * @param padre
     */
    public Panel_Sintactico(JFrame padre) {
        initComponents();
        this.padre = padre;
        this.modelo = (DefaultTableModel) tbResultado.getModel();
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer)tbResultado.getDefaultRenderer(Object.class);
        renderer.setHorizontalAlignment( SwingConstants.CENTER );
        tbResultado.getColumnModel().getColumn(0).setPreferredWidth(5);
        tbResultado.getColumnModel().getColumn(2).setPreferredWidth(15);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel1 = new keeptoo.KGradientPanel();
        consola = new javax.swing.JPanel();
        KLimpiar1 = new keeptoo.KGradientPanel();
        btnLimpiar1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Console = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtCodigo = new javax.swing.JTextArea();
        KAnalizar = new keeptoo.KGradientPanel();
        btnAnalizar = new javax.swing.JButton();
        btnAbrir = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tbResultado = new javax.swing.JTable();
        KAnalizar1 = new keeptoo.KGradientPanel();
        btnAbrir1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(123, 156, 225));
        setMinimumSize(new java.awt.Dimension(880, 618));
        setPreferredSize(new java.awt.Dimension(880, 618));
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                formAncestorResized(evt);
            }
        });

        kGradientPanel1.setkEndColor(new java.awt.Color(71, 120, 197));
        kGradientPanel1.setkStartColor(new java.awt.Color(71, 120, 197));

        consola.setBackground(new java.awt.Color(255, 255, 255));
        consola.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "<html> Resultado del Analisis Sintactico </html>", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(102, 102, 102))); // NOI18N
        consola.setForeground(new java.awt.Color(102, 102, 102));

        btnLimpiar1.setBackground(new java.awt.Color(169, 224, 49));
        btnLimpiar1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnLimpiar1.setForeground(new java.awt.Color(255, 255, 255));
        btnLimpiar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-borrar-24.png"))); // NOI18N
        btnLimpiar1.setText("Limpiar Todo");
        btnLimpiar1.setToolTipText("Limpiar Todo");
        btnLimpiar1.setBorder(null);
        btnLimpiar1.setBorderPainted(false);
        btnLimpiar1.setContentAreaFilled(false);
        btnLimpiar1.setFocusPainted(false);
        btnLimpiar1.setHideActionText(true);
        btnLimpiar1.setRequestFocusEnabled(false);
        btnLimpiar1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-borrar-24 (1).png"))); // NOI18N
        btnLimpiar1.setVerifyInputWhenFocusTarget(false);
        btnLimpiar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout KLimpiar1Layout = new javax.swing.GroupLayout(KLimpiar1);
        KLimpiar1.setLayout(KLimpiar1Layout);
        KLimpiar1Layout.setHorizontalGroup(
            KLimpiar1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnLimpiar1, javax.swing.GroupLayout.DEFAULT_SIZE, 808, Short.MAX_VALUE)
        );
        KLimpiar1Layout.setVerticalGroup(
            KLimpiar1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnLimpiar1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        Console.setFocusable(false);
        jScrollPane2.setViewportView(Console);

        javax.swing.GroupLayout consolaLayout = new javax.swing.GroupLayout(consola);
        consola.setLayout(consolaLayout);
        consolaLayout.setHorizontalGroup(
            consolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(consolaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(consolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 808, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(KLimpiar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        consolaLayout.setVerticalGroup(
            consolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(consolaLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KLimpiar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "<html> Ingrese las Sentencias </html>", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(102, 102, 102))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(102, 102, 102));
        jPanel1.setPreferredSize(new java.awt.Dimension(415, 373));

        txtCodigo.setColumns(20);
        txtCodigo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtCodigo.setForeground(new java.awt.Color(102, 102, 102));
        txtCodigo.setRows(5);
        txtCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodigoKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(txtCodigo);

        KAnalizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KAnalizarMousePressed(evt);
            }
        });

        btnAnalizar.setBackground(new java.awt.Color(169, 224, 49));
        btnAnalizar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAnalizar.setForeground(new java.awt.Color(255, 255, 255));
        btnAnalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-letra-pequeña-24.png"))); // NOI18N
        btnAnalizar.setText("Analizar");
        btnAnalizar.setToolTipText("Analizar Código");
        btnAnalizar.setBorder(null);
        btnAnalizar.setBorderPainted(false);
        btnAnalizar.setContentAreaFilled(false);
        btnAnalizar.setFocusPainted(false);
        btnAnalizar.setHideActionText(true);
        btnAnalizar.setRequestFocusEnabled(false);
        btnAnalizar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-letra-pequeña-24 (1).png"))); // NOI18N
        btnAnalizar.setVerifyInputWhenFocusTarget(false);
        btnAnalizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAnalizarMouseClicked(evt);
            }
        });
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        btnAbrir.setBackground(new java.awt.Color(169, 224, 49));
        btnAbrir.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAbrir.setForeground(new java.awt.Color(255, 255, 255));
        btnAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-abrir-carpeta-24.png"))); // NOI18N
        btnAbrir.setText("Abrir Código");
        btnAbrir.setToolTipText("Abrir Código");
        btnAbrir.setBorder(null);
        btnAbrir.setBorderPainted(false);
        btnAbrir.setContentAreaFilled(false);
        btnAbrir.setFocusPainted(false);
        btnAbrir.setHideActionText(true);
        btnAbrir.setRequestFocusEnabled(false);
        btnAbrir.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-abrir-carpeta-24 (1).png"))); // NOI18N
        btnAbrir.setVerifyInputWhenFocusTarget(false);
        btnAbrir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAbrirMouseClicked(evt);
            }
        });
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout KAnalizarLayout = new javax.swing.GroupLayout(KAnalizar);
        KAnalizar.setLayout(KAnalizarLayout);
        KAnalizarLayout.setHorizontalGroup(
            KAnalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, KAnalizarLayout.createSequentialGroup()
                .addComponent(btnAbrir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAnalizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        KAnalizarLayout.setVerticalGroup(
            KAnalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, KAnalizarLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(KAnalizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, KAnalizarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                    .addComponent(KAnalizar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "<html> Tabla de Simbolos </html>", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(102, 102, 102))); // NOI18N
        jPanel6.setForeground(new java.awt.Color(102, 102, 102));
        jPanel6.setPreferredSize(new java.awt.Dimension(415, 373));

        jScrollPane6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        tbResultado.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tbResultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Linea", "Tipo", "Simbolo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbResultado.setGridColor(new java.awt.Color(255, 255, 255));
        tbResultado.setRowHeight(22);
        jScrollPane6.setViewportView(tbResultado);

        KAnalizar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KAnalizar1MousePressed(evt);
            }
        });

        btnAbrir1.setBackground(new java.awt.Color(169, 224, 49));
        btnAbrir1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAbrir1.setForeground(new java.awt.Color(255, 255, 255));
        btnAbrir1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-hierarchy-24.png"))); // NOI18N
        btnAbrir1.setText("Mostrar Arból");
        btnAbrir1.setToolTipText("Mostrar Arból");
        btnAbrir1.setBorder(null);
        btnAbrir1.setBorderPainted(false);
        btnAbrir1.setContentAreaFilled(false);
        btnAbrir1.setFocusPainted(false);
        btnAbrir1.setHideActionText(true);
        btnAbrir1.setRequestFocusEnabled(false);
        btnAbrir1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-hierarchy-24 (1).png"))); // NOI18N
        btnAbrir1.setVerifyInputWhenFocusTarget(false);
        btnAbrir1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAbrir1MouseClicked(evt);
            }
        });
        btnAbrir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrir1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout KAnalizar1Layout = new javax.swing.GroupLayout(KAnalizar1);
        KAnalizar1.setLayout(KAnalizar1Layout);
        KAnalizar1Layout.setHorizontalGroup(
            KAnalizar1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnAbrir1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        KAnalizar1Layout.setVerticalGroup(
            KAnalizar1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, KAnalizar1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnAbrir1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                    .addComponent(KAnalizar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KAnalizar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(consola, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(consola, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized
        
    }//GEN-LAST:event_formAncestorResized

    private void btnLimpiar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiar1ActionPerformed
        Generando = false;
        Console.setText("");
        txtCodigo.setText("");
        for (int i = (modelo.getRowCount()-1);i>=0; i--)
            modelo.removeRow(i);
    }//GEN-LAST:event_btnLimpiar1ActionPerformed

    private void KAnalizarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_KAnalizarMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_KAnalizarMousePressed

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        try {
            JFileChooser chooser = new JFileChooser(System.getProperty("user.dir"));
            FileNameExtensionFilter fi = new FileNameExtensionFilter("txt", "txt");
            chooser.setFileFilter(fi);
            int se = chooser.showOpenDialog(null);
            if (se == 0) {
                File archivo = chooser.getSelectedFile();
                String texto = new String(Files.readAllBytes(archivo.toPath()));
                txtCodigo.setText(texto);
            } else {
                //JOptionPane.showMessageDialog(null, "No selecciono");
            }
        } catch (IOException ex) {
            Logger.getLogger(Panel_Sintactico.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void btnAbrirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAbrirMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAbrirMouseClicked

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        Console.setText("");
        try {
            analizarLexico();
        } catch (IOException ex) {
            appendToPane(Console, "El Analisis Lexico ha fallado!!!\n", Color.RED);
        }

        analizadorSintactico();
    }//GEN-LAST:event_btnAnalizarActionPerformed

    private void btnAnalizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAnalizarMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAnalizarMouseClicked

    private void txtCodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoKeyTyped

    }//GEN-LAST:event_txtCodigoKeyTyped

    private void btnAbrir1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAbrir1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAbrir1MouseClicked

    private void btnAbrir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrir1ActionPerformed
        if(!Generando){
            JOptionPane.showMessageDialog(null, "¡Ingrese un Código Valido Primero!");
            return;
        }
        
        Image img = null;
        
        try {
            img = ImageIO.read(new File("arbol.png"));
        } catch (IOException ex) {
            System.out.println("El fichero aun no esta listo");
        }
        
        if(img == null){
            JOptionPane.showMessageDialog(null, "¡Por Favor, Espere a que el Arból este Listo!");
        }else{
            new ImageViewer(padre,true).setVisible(true);
        }
    }//GEN-LAST:event_btnAbrir1ActionPerformed

    private void KAnalizar1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_KAnalizar1MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_KAnalizar1MousePressed

    public void RedimFull(boolean Redimenzionar){
        if(Redimenzionar){
            this.setBounds(0, 0, 1110, 619);
            kGradientPanel1.setBounds(0, 0, 1110, 619);
            consola.setBounds(20,408,1070,192);
        }else{
            this.setBounds(0,0,880,618);
            kGradientPanel1.setBounds(0,0,880,618);
            
            consola.setBounds(20,408,840,192);
            Console.setBounds(0,0,805,100);
        }
    }
    
    private void analizadorSintactico(){
        String ST = txtCodigo.getText();
        Sintax sintactico = new Sintax(new AnalizadorLex_Cup(new StringReader(ST)));
        
        try {
            sintactico.parse();
            appendToPane(Console, "El Analisis Sintactico Termino con Exito\n", new Color(25, 111, 61));
            
            if(sintactico.padre != null){
                appendToPane(Console, "Graficando Árbol de Derivación...\n", Color.BLUE);
                graficar(sintactico.padre);
                CheckTree comprobar = new CheckTree();
                comprobar.start(); 
            }else{
                appendToPane(Console, "Hubo un Error al Graficar el Árbol de Derivación\n", Color.red);
            }
        } catch (Exception ex) {
            Generando = false;
            appendToPane(Console, sintactico.resultado + "\n", Color.red);
        }
    }
    
    
    private void analizarLexico() throws IOException{
        for (int i = (modelo.getRowCount()-1);i>=0; i--)
            modelo.removeRow(i);
        
        int cont = 1;
        String expr = (String) txtCodigo.getText();
        AnalizadorLexico lexer = new AnalizadorLexico(new StringReader(expr));
        
        while (true) {
            Tokens token = lexer.yylex();
            if (token == null) {
                return;
            }
            switch (token) {
                case Linea:
                    cont++;
                    break;
                case Comillas:
                    modelo.addRow(new Object[]{cont,"<Comillas>",lexer.lexeme});
                    break;
                case Cadena:
                    modelo.addRow(new Object[]{cont,"<Tipo de dato>",lexer.lexeme});
                    break;
                case T_dato:
                    modelo.addRow(new Object[]{cont,"<Tipo de dato>",lexer.lexeme});
                    break;
                case If:
                    modelo.addRow(new Object[]{cont,"<Reservada if>",lexer.lexeme});
                    break;
                case Else:
                    modelo.addRow(new Object[]{cont,"<Reservada else>",lexer.lexeme});
                    break;
                case Do:
                    modelo.addRow(new Object[]{cont,"<Reservada do>",lexer.lexeme});
                    break;
                case While:
                    modelo.addRow(new Object[]{cont,"<Reservada if>",lexer.lexeme});
                    break;
                case For:
                    modelo.addRow(new Object[]{cont,"<Reservada For>",lexer.lexeme});
                    break;
                case Igual:
                    modelo.addRow(new Object[]{cont,"<Operador igual>",lexer.lexeme});
                    break;
                case Suma:
                    modelo.addRow(new Object[]{cont,"<Operador suma>",lexer.lexeme});
                    break;
                case Resta:
                    modelo.addRow(new Object[]{cont,"<Operador resta>",lexer.lexeme});
                    break;
                case Multiplicacion:
                    modelo.addRow(new Object[]{cont,"<Operador multiplicacion>",lexer.lexeme});
                    break;
                case Division:
                    modelo.addRow(new Object[]{cont,"<Operador division>",lexer.lexeme});
                    break;
                case Op_logico:
                    modelo.addRow(new Object[]{cont,"<Operador logico>",lexer.lexeme});
                    break;
                case Op_incremento:
                    modelo.addRow(new Object[]{cont,"<Operador incremento>",lexer.lexeme});
                    break;
                case Op_relacional:
                    modelo.addRow(new Object[]{cont,"<Operador relacional>",lexer.lexeme});
                    break;
                case Op_atribucion:
                    modelo.addRow(new Object[]{cont,"<Operador atribucion>",lexer.lexeme});
                    break;
                case Op_booleano:
                    modelo.addRow(new Object[]{cont,"<Operador booleano>",lexer.lexeme});
                    break;
                case Parentesis_a:
                    modelo.addRow(new Object[]{cont,"<Parentesis de apertura>",lexer.lexeme});
                    break;
                case Parentesis_c:
                    modelo.addRow(new Object[]{cont,"<Parentesis de cierre>",lexer.lexeme});
                    break;
                case Llave_a:
                    modelo.addRow(new Object[]{cont,"<Llave de apertura>",lexer.lexeme});
                    break;
                case Llave_c:
                    modelo.addRow(new Object[]{cont,"<Llave de cierre>",lexer.lexeme});
                    break;
                case Corchete_a:
                    modelo.addRow(new Object[]{cont,"<Corchete de apertura>",lexer.lexeme});
                    break;
                case Corchete_c:
                    modelo.addRow(new Object[]{cont,"<Corchete de cierre>",lexer.lexeme});
                    break;
                case Main:
                    modelo.addRow(new Object[]{cont,"<Reservada main>",lexer.lexeme});
                    break;
                case P_coma:
                    modelo.addRow(new Object[]{cont,"<Punto y coma>",lexer.lexeme});
                    break;
                case Identificador:
                    modelo.addRow(new Object[]{cont,"<Identificador>",lexer.lexeme});
                    break;
                case Numero:
                    modelo.addRow(new Object[]{cont,"<Numero>",lexer.lexeme});
                    break;
                case Arreglo_String:
                    modelo.addRow(new Object[]{"" + cont,"<Arreglo de String>",lexer.lexeme});
                    break;
                case Arreglo_Int:
                    modelo.addRow(new Object[]{"" + cont,"<Arreglo de Int>",lexer.lexeme});
                    break;
                case Arreglo_Float:
                    modelo.addRow(new Object[]{"" + cont,"<Arreglo de Float>",lexer.lexeme});
                    break;
                case New:
                    modelo.addRow(new Object[]{"" + cont,"<Invocador>",lexer.lexeme});
                    break;
                case Public:
                    modelo.addRow(new Object[]{"" + cont,"<Modificador de acceso>",lexer.lexeme});
                    break;
                case Void:
                    modelo.addRow(new Object[]{"" + cont,"<Retorno nulo>",lexer.lexeme});
                    break;  
                case Private:
                    modelo.addRow(new Object[]{"" + cont,"<Modoficador de acceso>",lexer.lexeme});
                    break;
                case Matriz_e:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Matriz de entero>",lexer.lexeme});
                    break;
                case Matriz_c:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Matriz de caracteres>",lexer.lexeme});
                    break;
               case Matriz_s:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Matriz de String>",lexer.lexeme});
                    break;
                case Clase_p:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Clase publica>",lexer.lexeme});
                    break;
                case Clase_s:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Clase static>",lexer.lexeme});
                    break;
                case paquete:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Paquete>",lexer.lexeme});
                    break;
                case Importacion:
                    modelo.addRow(new Object[]{"" + cont,"<Importacion de libreria>",lexer.lexeme});  
                    break;
                 case Punto:
                    modelo.addRow(new Object[]{"" + cont,"<Signo punto>",lexer.lexeme});  
                    break;
                 case Dos_puntos:
                    modelo.addRow(new Object[]{"" + cont,"<Signo Dos puntos>",lexer.lexeme});  
                    break;
                 case Comentario:
                    modelo.addRow(new Object[]{"" + cont,"<Comentarios>",lexer.lexeme});  
                    break;
                 case Captura_d:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Captura de datos>",lexer.lexeme});  
                    break;
                 case casos:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Swicht>",lexer.lexeme});  
                    break;
                 case Captura_e:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Captura de dato entera >",lexer.lexeme});  
                    break;
                case Captura_do:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Captura de dato dooble>",lexer.lexeme});  
                    break;
                case Captura_t:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Captura de dato String>",lexer.lexeme});  
                    break;
                case Impresion_p:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Impresion de Pantalla>",lexer.lexeme});  
                    break; 
                case funcClase:
                    modelo.addRow(new Object[]{"" + cont,"<Función de una Clase>",lexer.lexeme});  
                    break;
                case Ath:
                    modelo.addRow(new Object[]{"" + cont,"<Clase Math>",lexer.lexeme});  
                    break;
                case Abstracto:  
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Metodode implementacion Abstracto>",lexer.lexeme});  
                    break;
                case V_f:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada describe un predicado (una declaración de verdadero / falso)>",lexer.lexeme});  
                    break;    
                case Num:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada para declarar un tipo enumerado>",lexer.lexeme});  
                    break;  
                case Exportar:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada para modular para exportar un paquete con un módulo>",lexer.lexeme});  
                    break; 
                case Fnl:  
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Defina una entidad una vez que no se puede cambiar ni derivar de más adelante>",lexer.lexeme});  
                    break;    
                case Extender:
                    modelo.addRow(new Object[]{"" + cont,"<Reservada para declaración de clase para especificar la superclase>",lexer.lexeme});  
                    break;  
                case Impleme:  
                    modelo.addRow(new Object[]{"" + cont,"<Reservada declaración de clase para especificar una o más interfaces implementadas por la clase actual>",lexer.lexeme});  
                    break;
                case Const:  
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Para definir constantes en Java >",lexer.lexeme});  
                    break;    
                case Inta:  
                    modelo.addRow(new Object[]{"" + cont,"<Reservada Se utiliza para representar una instancia de la clase en la que aparece. >",lexer.lexeme});  
                    break;
                case Return:
                    modelo.addRow(new Object[]{"" + cont,"<Retorna un valor>",lexer.lexeme});  
                    break;
                case ERROR:
                    modelo.addRow(new Object[]{cont,"<Simbolo no definido>",lexer.lexeme});
                    break;
                default:
                    modelo.addRow(new Object[]{cont,"<" + lexer.lexeme + ">",lexer.lexeme});
                    break;
            }
        } 
    }
    
    /*
        Graficar Nodos
    */
    public void graficar(Nodo raiz){
        FileWriter archivo;
        PrintWriter pw;
        
        try{
            archivo = new FileWriter("arbol.dot");
            pw = new PrintWriter(archivo);
            //pw.println("digraph G {node[shape=box, style=filled, color=blanchedalmond]; edge[color=chocolate3];rankdir=UD \n");
            pw.println("digraph G {node [shape=box, style=filled, fontsize=14, color=\"#40b9e5\" fontcolor=\"#FFFFFF\"]; "
                    + "edge[color=gray50 fontcolor=gray50];rankdir=UD \ngraph [ dpi = 300];\n");
            pw.println(LabelNodo(raiz));
            pw.println(graficarNodo(raiz));
            pw.println("\n}");
            archivo.close();
        }catch (IOException e) {
            appendToPane(Console, e + "\n", Color.RED);
        }
        
        try {
            
            String dotPath = "C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe";
            String fileInputPath = "arbol.dot";
            String fileOutputPath = "arbol.png";
            String tParam = "-Tpng";
            String tOParam = "-o";

            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;
            
            
            ProcessBuilder pbuilder = new ProcessBuilder( cmd );
            pbuilder.redirectErrorStream( true );
            //Ejecuta el proceso
            pbuilder.start();
            Generando = true;
        } catch (IOException ex) {
            appendToPane(Console, ex + "\n", Color.RED);
            System.out.println(ex +" 2");
        }
    }
    
    public String LabelNodo(Nodo nodo){
        String cadena = "";
        for(Nodo hijos : nodo.getHijos())
        {
            cadena += nodo.getName() + " [label=\"" + nodo.getNombre()+ "\", color=\""+ nodo.getColor() +"\"]\n";
            cadena += "\""+hijos.getNumNodo() + " " + hijos.getNombre() + "\" [label=\"" + hijos.getNombre()+ "\", color=\""+ hijos.getColor() +"\"]\n";
            cadena += LabelNodo(hijos);    
        }
        return cadena;
    }
    
    public String graficarNodo(Nodo nodo){
        String cadena = "";
        for(Nodo hijos : nodo.getHijos())
        {
            cadena += "\"" + nodo.getNumNodo() + " " + nodo.getNombre() + "\" -> \"" + hijos.getNumNodo() + " " + hijos.getNombre() + "\"\n";
            cadena += graficarNodo(hijos);
        }
        return cadena;
    }
    
    private void appendToPane(JTextPane tp, String msg, Color c)
    {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = tp.getDocument().getLength();
        tp.setCaretPosition(len);
        tp.setCharacterAttributes(aset, false);
        tp.replaceSelection(msg);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextPane Console;
    private keeptoo.KGradientPanel KAnalizar;
    private keeptoo.KGradientPanel KAnalizar1;
    private keeptoo.KGradientPanel KLimpiar1;
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnAbrir1;
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton btnLimpiar1;
    private javax.swing.JPanel consola;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private keeptoo.KGradientPanel kGradientPanel1;
    private javax.swing.JTable tbResultado;
    private javax.swing.JTextArea txtCodigo;
    // End of variables declaration//GEN-END:variables
}

class CheckTree extends Thread {
    @Override
    public void run(){
        System.out.print("Comprobando Que se haya creado el arbol");
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(CheckTree.class.getName()).log(Level.SEVERE, null, ex);
        }
        Image img = null;
        do{
            try {
                    img = ImageIO.read(new File("arbol.png"));
            } catch (IOException ex) {
                       
            }
        }while(img==null);
        appendToPane(Console, "Árbol Graficado Exitosamente!\n", new Color(25, 111, 61));
    }
    
    private void appendToPane(JTextPane tp, String msg, Color c)
    {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = tp.getDocument().getLength();
        tp.setCaretPosition(len);
        tp.setCharacterAttributes(aset, false);
        tp.replaceSelection(msg);
    }
}